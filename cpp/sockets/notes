https://beej.us/guide/bgnet/html/#client-server-background
https://beej.us/guide/bgnet/html/

---------------------------------------------------------------------------------------------------------

There are two main types of internet sockets: stream sockets (SOCK_STREAM) and datagram sockets (SOCK_DGRAM). stream sockets are realiable two-way connections (they are TCP), datagram uses UDP

To convert the endianess of the bytes there are some functions:

htons() ---> host to network short
htonl() ---> host to network long
ntohs() ---> network to host short
ntohl() ---> network to host long


The socket descriptors are ints 

struct addrinfo {
    int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
    int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
    int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
    int              ai_protocol;  // use 0 for "any"
    size_t           ai_addrlen;   // size of ai_addr in bytes
    struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
    char            *ai_canonname; // full canonical hostname

    struct addrinfo *ai_next;      // linked list, next node
};

To obtain this struct from a socket you could use the function getaddrinfo() that returns a pointer to the linked list of the struct filled with the values.

Commonly we dont fill the sockaddr struct directly.. but here are its items
struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
}; 

sa_data contains the destination address and port of the socket.

To deal with sockaddr struct programmers created sockaddr_in (in is for internet) to be used with ipv4. A pointer to sockaddr_in can be casted to sockaddr and vice-versa,


struct sockaddr_in {
    short int          sin_family;  // Address family, AF_INET
    unsigned short int sin_port;    // Port number
    struct in_addr     sin_addr;    // Internet address
    unsigned char      sin_zero[8]; // Same size as struct sockaddr
};

struct in_addr {
    uint32_t s_addr; // that's a 32-bit int (4 bytes)
};

This structs seems to be replaced just by the uint32... but there are some pcs that still got it.

---------------------------------------------------------------------------------------------------------

There handy functions to deal with the addresses and ports:
struct sockaddr_in sa;
inet_pton(AF_INET, "10.0.2.123", &(sa.sin_addr));   //set the ipv4 in sa.

inet_pton = internal network presentation to network (or something like that)


Now if we want it parametrized...
char ip4[INET_ADDRSTRLEN];
struct sockaddr_in sa;

inet_ntop(AF_INET, &(sa.sin_addr), ip4, INET_ADDRSTRLEN);

This functions only work with numeric ips (wont work with dns like www.google.com)


To obtain the sockaddr struct from a socket you could use getaddrinfo() function.


-------------------------------------------------------------------------------------------
here a snipet that gets the addrinfo of a webpage

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int getaddrinfo( const char *node,  //www.example.com or IP
                const char *service,//port or service ("http" for ex)
                const struct addrinfo *hints,
                struct addrinfo **res);

after giving the function the parameters it returns the output to res.

The struct hints its a struct created previously that is already filled with important info:

int status;
struct addrinfo hints;
struct addrinfo *servinfo;  //this will be our results

memset(&hints, 0, sizeof(hints));   //empty the struct
hints.ai_family = AF_UNSPEC;        //dont care ip4 or ip6
hints.ai_socktype = SOCK_STREAM;    //tcp
hints.ai_flags = AI_PASSIVE;        //fill the ip for me :P

if((status = getaddrinfo(NULL, "3490", &hints, &servinfo)) !=0){
    printf(stderr, "getaddrinfo error: %s\n", gai_strerror(status))
    exit(1);

}
//if everything goes well here you got the addr information and you could use it whatever you want
freeaddrinfo(servinfo); //free the linked list

The AF_UNSPEC tells to the getaddrinfo to fill the address with the localhost one.... but he also puts NULL in the first argument of the getaddrinfo so its redundant
if you dont want to use the localhost address you can not write anything to the ai_flags and pass the address or alias to the getaddrinfo function.

-------------------------------------------------------------------------------------------------
#include <sys/types.h>
#include <sys/socket.h>

int socket(int domain, int type, int protocol);

domain can be PF_INET or PF_INET6, type can be SOCK_STREAM or SOCK_DGRAM and protocol can be set to 0 and it will choose the apporpiate protocol of the type.

PF_INET and AF_INET have the same value, so people also pass it.


what we want is to use the values that we got from the getaddrinfo:

getaddrinfo("www.example.com", "http", &hints, &res);

int s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

if the socket functions returns -1 there is an error and the global variable errno is set with the appropiated errorcode.
---------------------------------------------------------------------------------------------

int bind(int sockfd, struct sockaddr *my_addr, int addrlen);

bind is to associate the socket with a given port of localmachine, this is the common when the socket is going to listen for incomming connections. If you are going to connect to a server you dont need to do this.


example:
struct addinfo hints, *res;
int sockfd;

memset(&hints, 0, sizeof(hints));
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;

getaddrinfo(NULL, "3490", &hints, &res);
sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
bind(sockfd, res->ai_addr, res->ai_addrlen);

bind also returns -1 if fails and set the errno


there is lot of old code that fills the sockaddr_in manually:
sockfd = socket(PF_INET, SOCK_STREAM, 0);
my_addr.sin_family = AF_INET;
my_addr.sin_port = htons(MYPORT);
my_addr.sin_addr.s_addr = inet_addr("10.12.110.57");    //this is the address he wants to bind to
memset(my_addr.sin_zero, '\0', sizeof(my_addr.sin_zero));
bind(sockfd, (struct sockaddr *)&my_addr, sizeof(my_addr));



Usually when trying to bind a socket you could get a address already in use, you could set a flag to reuse it:

int yes = 1;
setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));


if you are going to connect to an external server that doesnt care about the local port, you can skip the bind function.
-------------------------------------------------------------------------------------------------

int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);

All the info can be obtained by the getaddrinfo function:

struct addrinfo hints, *res;
memset(&hints, 0, sizeof(hints));
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;

getaddrinfo("www.example.com", "3490", &hints, &res);
int sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
connect(sockfd, res->ai_addr, res->ai_addrlen);

In this example we dont care what is the port that our socket is binded to, the kernel will assign one for us.

------------------------------------------------------------------------------------------------

if you want to listen to some connection then you need to first listen and then accept the incomming connection.

int listen(int sockfd, int backlog);

backlog is the number of allowed connections in the queue. This means that connections are going to wait until you accept them, and the backlog is the max size of this queue.

The accept function will return a new socket file ot be used for the connection with the incomming socket, so you have 2 file descriptors: one for your socket and the other for the remote one. The original is keeping listening for new incomming connections and the new one is ready to be used with send and recv functions.

int accept(int sockfd, struct sockaddr *addr, socklen_t *addr_len);

sockfd is the listening socket, addr will have the information about the remote socket and addrlen is an int that should be set to sizeof(addr)

example:
#define MYPORT "3490"
#define BACKLOG 10

struct sockaddr_storage, their_addr;
socklen_t addr_size;
struct addrinfo hints, *res;
int sockfd, new_fd;

memset(&hints, 0, sizof(hits));
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;

getaddrinfo(NULL, MYPORT, &hints, &res);
sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
bind(sockfd, res->ai_addr, res->ai_addrlen);
listen(sockfd, BACKLOG);
addr_size = sizeof(their_addr);
new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);

------------------------------------------------------------------------------------------------

send and recv are for the connected stream sockets and datagrams. If you want to send unconnected datagram you should use sendto() and recvfrom()


send and recv are for the connected stream sockets and datagrams. If you want to send unconnected datagram you should use sendto() and recvfrom()

int send(int sockfd, const void *msg, int len, int flags);

for example:
char *msg = "Hello world!\n";
int len, byte_sent;

len = strlen(msg);
byte_sent = send(sockfd, msg, len, 0);  //this return the number of bytes sent

could be the case that byte_sent and len are different and then is your task to fix that issue.


The recv call is similar:
int recv(int sockfd, void *buf, int len, int flags);

buff is the buffer where the data read is written to and len is the max size of this buffer.

as different than the other errorcodes recv can return 0 and that means that the remote side has closed the connection.

------------------------------------------------------------------------------------------------

Since unconnected sockets doesnt connect to any host we need to tell it the destination address:
int sendto(int sockfd, const void *msg, int len, unsigned int flags, 
            const struct sockaddr *to, socklen_t tolen);

the to struct conntains the ip addr and port of the destination and the tolen can be set to sizeof(*to)

to get thte destination address structure you could get it from the getaddrinfo or from the recvfrom command.

int recvfrom(int sockfd, void *buf, int len, unsigned int flags, 
            struct sockaddr *from, int *fromlen);

The end of the story is that if you connect the socket then you could use recv and send for all the transactions.

---------------------------------------------------------------------------------------------------------

to close the socket --> close(socketfd);
this leads to an error if someone wants to read/write will get an error.

also you could use shutdown that allows you to kill just the transmission or receiving.

int shutdown(int sockfd, int how);

how: 0->recv are disallowed, 1->sends are disallowed, 2->send and recv are disallowed.

its important that shutdown does not close the filedescriptor... only close() can do that.

--------------------------------------------------------------------------------------------------
by default the sockets are blockings.. if you want to make them non-blocking you have to make a call to fcntl

#include <unistd.h>
#include <fcntl.h>

sockfd = socket(PF_INET, SOCK_STREAM,0);
fcntl(sockfd, F_SETFL, O_NONBLOCK);

if you try to read data from a non-blocking socket it will return -1 and error will be EAGAIN or EWOULDBLOCK.

Anyways this scheme is not usually a good idea since you are eating a lot of cpu just checking if there is something in the socket.

------------------------------------------------------------------------------

to avoid monitoring all the time w can use the library poll and let the os tell us when a socket has data ready to be read.

The idea is to keep am array of struct pollfd with information about the socket descriptors that we want to monitor and the kind of events that we want to monitor for. the os will block on poll call until one of those events occurs.


#include <poll.h>
int poll(struct pollfd fds[], nfds_t nfds, int timeout);

fds is our struct wiht socket info, the nfds is the size of the fds and timeout is in milliseconds (if timeout is less than 0 then it waits for ever).
the function returns the number of elements on the array that had an event.


struct pollfd {
    int fd;             //socket fd
    short events;       //bitmap of events that we are interested in,
    short revents;      //when poll returns, bitmap of events that ocurrs.
}

The events fields are: POLLIN-> alert me when data is ready to recv in that socket.
                       POLLOUT-> alert me when I can send data to this socket.

After poll() returns you could check for every item if the POLLIN and POLLOUT are set-


Here an example for the stdin:

#include <stdio.h>
#include <poll.h>


int main(void){
    struct pollfd pfds[1];  //
    pfds[0].fd = 0;         //stdin
    pfds[0].events = POLLIN;//tell me when there is data to read

    int num_events = poll(pfds, 1,2500);    //2.5sec of timeout

    if(num_events ==0)
        printf("Poll timeout");
    else{
        int pollin_happend = pfds[0].revents &  POLLIN; //check if it has the flag
        if(pollin_happend)
            printf("File descriptor %d is ready to read\n", pfds[0].fd);
        else
            printf("Unexpected event occurred %d\n", pdfs[0].revents);
    }
    return 0;
}


Notice that poll doesnt tell you which element in the array is ready (you need to scan for it) 
Another tip is that if you set fd = -1 in the pfds then the poll function will ignore it.

---------------------------------------------------------------------------------------
There is a simmilar old function that use to be the standard before poll, that is select(), the guy in the page said that is clunkier that poll. 
But select tells you which are the socket that are ready to be written or read.

#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int select(int numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
            struct timeval *timeout);

If you want to monitor the writting then you should add the fd to writefds, to read to readfds, etc
the numfds should be set to the values of the higher fd (read, write or except) plus one.

There are a couple of macros to operate the fd_set.

FD_SET(int fd, fd_set *set);    //add fd to the set
FD_CLR(int fd, fd_set *set);    //reomve fd from set
FD_ISSET(int fd, fd_set *set);  //return true if fd is in set
FD_ZERO(fd_set *set);           //clear all entries of set


on the other hand the teimout is the time that the select waits..if its set to zero select just timout inmediatly to wait forever you have to set it as NULL.
struct timeval{
    int tv_sec;     //seconds
    int tv_usec;    //microsecods
}


ex:
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#define STDIN 0     //fd of the stdin

int main(){
    struct tiemval tv;
    fd_set readfds;
    
    tv.tv_sec = 2; tv.tv_usec = 50000;

    FD_ZERO(&readfds);
    FD_SET(STDIN, &readfds);

    //dont care about the writefds and exceptfds
    select(STDIN+1, &readfds, NULL, NULL, &tv);

    if(FD_ISSSET(STDIN, &readfds))
        printf("A key was pressed!");
    else
        printf("timeout");
    return 0;
}


Another tip is that if you have a socket listening you can check if there is a new connection by putting it in the readfds.
He says that the select implmentation might change from machine to machine so an be trivky to use in multiple setups.


--------------------------------------------------------------------------------------

When sending raw data you could just pass a pointer to the thing that you want to send... but there is a caveat since the representation of the data could vary from machine... so he propouse use an encoding for the data and after the receiver deceode it.
He says that there are libraries that makes that.. so instead of implement them you should look carefully for them.
Also the structs cannot be packed, bcs the os will select how to pack it.. the best is to pack every item by itself and then send them.
